% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coerce_safe.R
\name{coerce_safe}
\alias{coerce_safe}
\title{coerce_safe}
\usage{
coerce_safe(object, class, alert = stop, ..., irreversible.alert = alert,
  na.alert = alert)
}
\arguments{
\item{object}{to be coerced}

\item{class}{character; class to which \code{object} should be coerced.}

\item{alert}{function to use to raise exceptions: (Default: \code{\link[base:stop]{base::stop()}})}

\item{...}{unused}

\item{alert.irrevisible}{function to raise when coercion is not reversible.
See Details.}

\item{alert.na}{function to raise when \code{NAs} are produced.

\code{coerce_safe} coerces the class/types of \code{object} in a safe, consistent,
non-destructible way.

This means that safe coercion:
\enumerate{
\item is reversible, \code{x == inv_f( f(x))}: no data should be lost in the coercion.
\item does not introduce (additional) missing values (\code{NA})
}

By default, \code{corece_safe} raises an error when the coercion is violates these
constraints.  The \code{alert} (or \code{alert.irreversible} or \code{alert.na}) can be used
to change the response.  These can be set to \code{\link[base:warning]{base::warning()}} or
\code{\link[base:message]{base::message()}} for a less severve behavior.}
}
\description{
Coerce values in a safe, reversible and consistent way.
}
\note{
There must be a \code{as} method to the reverse coercion for this function to work.
}
\examples{

\dontrun{
  # Error
  1.01 \%>\% coerce_safe("integer")  # 1.01 != 1
  coerce_safe( c("1","2","a"), "integer" )
}

}
\seealso{
\link[methods:as]{methods::as}
\code{\link[coercion:try_as]{coercion::try_as()}}
}
